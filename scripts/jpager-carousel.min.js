(() => {
  const t = document.createElement("template");
  t.innerHTML =
    '\n    <style>\n      :host {\n        display: block;\n        position: relative;\n        overflow: hidden;\n        user-select: none;\n        width: 100%;\n        height: 100%;\n      }\n      .carousel-container {\n        display: flex;\n        overflow-x: auto;\n        overflow-y: hidden;\n        scroll-behavior: smooth;\n        -webkit-overflow-scrolling: touch;\n        scroll-snap-type: x mandatory;\n        flex-direction: row;\n        width: 100%;\n        height: 100%;\n        scrollbar-width: none; /* Firefox */\n        -ms-overflow-style: none; /* IE 10+ */\n        will-change: transform;\n        transform: translateZ(0);\n      }\n      .carousel-container::-webkit-scrollbar {\n        display: none;\n      }\n      ::slotted(.carousel-item) {\n        scroll-snap-align: start;\n        flex: 0 0 100%;\n        width: 100%;\n        height: 100%;\n        min-width: 100%;\n        min-height: 100%;\n        transition: opacity 0.3s ease;\n      }\n      button.nav-button {\n        position: absolute;\n        top: 50%;\n        transform: translateY(-50%);\n        z-index: 10;\n        background: rgba(0, 0, 0, 0.3);\n        color: white;\n        border: none;\n        border-radius: 9999px;\n        width: 2.5rem;\n        height: 2.5rem;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      button#prev {\n        left: 0.5rem;\n      }\n      button#next {\n        right: 0.5rem;\n      }\n      :host([orientation="vertical"]) .carousel-container {\n        flex-direction: column;\n        scroll-snap-type: y mandatory;\n        overflow-x: hidden;\n        overflow-y: auto;\n      }\n      :host([orientation="vertical"]) ::slotted(.carousel-item) {\n        flex: 0 0 100%;\n        width: 100%;\n        height: 100%;\n        min-width: 100%;\n        min-height: 100%;\n      }\n      :host([orientation="vertical"]) button#prev {\n        top: 0.5rem;\n        left: 50%;\n        transform: translateX(-50%);\n      }\n      :host([orientation="vertical"]) button#next {\n        top: auto;\n        bottom: 0.5rem;\n        left: 50%;\n        right: auto;\n        transform: translateX(-50%);\n      }\n      button.nav-button[hidden] {\n        display: none !important;\n      }\n\n      /* Indicator Styles */\n      .indicators {\n        position: absolute;\n        bottom: 1rem;\n        left: 50%;\n        transform: translateX(-50%);\n        display: flex;\n        gap: 0.5rem;\n        z-index: 20;\n      }\n      .indicators button {\n        width: 0.75rem;\n        height: 0.75rem;\n        border-radius: 50%;\n        border: none;\n        background: rgba(255, 255, 255, 0.5);\n        cursor: pointer;\n        padding: 0;\n      }\n      .indicators button[aria-selected="true"] {\n        background: white;\n        outline: 2px solid #000;\n        outline-offset: 2px;\n      }\n    </style>\n\n    <button id="prev" class="nav-button daisy-btn daisy-btn-circle" aria-label="Previous">‹</button>\n    <div class="carousel-container" tabindex="0" role="listbox" aria-live="polite">\n      <slot></slot>\n    </div>\n\n    <div class="indicators" role="tablist" aria-label="Carousel page indicators"></div>\n\n    <button id="next" class="nav-button daisy-btn daisy-btn-circle" aria-label="Next">›</button>\n  ';
  class e extends HTMLElement {
    static get observedAttributes() {
      return [
        "orientation",
        "width",
        "height",
        "show-buttons",
        "carousel",
        "allownext",
        "allowback",
        "lazyloading",
        "autoplay",
        "autoplay-interval",
      ];
    }
    constructor() {
      super(),
        this.attachShadow({ mode: "open" }),
        this.shadowRoot.appendChild(t.content.cloneNode(!0)),
        (this.container = this.shadowRoot.querySelector(".carousel-container")),
        (this.slots = this.shadowRoot.querySelector("slot")),
        (this.prevBtn = this.shadowRoot.querySelector("#prev")),
        (this.nextBtn = this.shadowRoot.querySelector("#next")),
        (this.indicators = this.shadowRoot.querySelector(".indicators")),
        (this._currentIndex = 0),
        (this._itemsCount = 0),
        (this._lazyLoadingExtraSize = 1),
        (this._autoplay = !1),
        (this._autoplayInterval = 3e3),
        (this._autoplayTimer = null),
        this.hasAttribute("carousel") || (this.carousel = !1),
        this.hasAttribute("allownext") || (this.allowNext = !0),
        this.hasAttribute("allowback") || (this.allowBack = !0),
        this.hasAttribute("lazyloading") || (this.lazyLoading = !1),
        this.hasAttribute("show-buttons") || (this.showButtons = !1),
        (this.orientation = this.getAttribute("orientation") || "horizontal"),
        (this.onNext = this.onNext.bind(this)),
        (this.onPrev = this.onPrev.bind(this)),
        (this.onSlotChange = this.onSlotChange.bind(this)),
        (this.onKeyDown = this.onKeyDown.bind(this)),
        (this.onScroll = this.onScroll.bind(this)),
        (this.onMouseEnter = this.stopAutoplay.bind(this)),
        (this.onMouseLeave = this.startAutoplay.bind(this)),
        (this.onFocusIn = this.stopAutoplay.bind(this)),
        (this.onFocusOut = this.startAutoplay.bind(this)),
        (this.debounceTimeout = null);
    }
    connectedCallback() {
      this.updateDimensions(),
        this.updateShowButtons(),
        this.updateOrientationStyles(),
        this.updateNavButtons(),
        this.nextBtn.addEventListener("click", this.onNext),
        this.prevBtn.addEventListener("click", this.onPrev),
        this.slots.addEventListener("slotchange", this.onSlotChange),
        this.container.addEventListener("keydown", this.onKeyDown),
        this.container.addEventListener("scroll", this.onScroll, {
          passive: !0,
        }),
        this.addEventListener("mouseenter", this.onMouseEnter),
        this.addEventListener("mouseleave", this.onMouseLeave),
        this.addEventListener("focusin", this.onFocusIn),
        this.addEventListener("focusout", this.onFocusOut),
        this._autoplay && this.startAutoplay(),
        this.onSlotChange();
    }
    disconnectedCallback() {
      this.nextBtn.removeEventListener("click", this.onNext),
        this.prevBtn.removeEventListener("click", this.onPrev),
        this.slots.removeEventListener("slotchange", this.onSlotChange),
        this.container.removeEventListener("keydown", this.onKeyDown),
        this.container.removeEventListener("scroll", this.onScroll),
        this.removeEventListener("mouseenter", this.onMouseEnter),
        this.removeEventListener("mouseleave", this.onMouseLeave),
        this.removeEventListener("focusin", this.onFocusIn),
        this.removeEventListener("focusout", this.onFocusOut),
        this.stopAutoplay();
    }
    attributeChangedCallback(t, e, n) {
      if (e !== n)
        switch (t) {
          case "orientation":
            (this.orientation = n || "horizontal"),
              this.updateOrientationStyles(),
              this.showPage(this._currentIndex);
            break;
          case "width":
          case "height":
            this.updateDimensions();
            break;
          case "show-buttons":
            (this.showButtons = "false" !== n), this.updateShowButtons();
            break;
          case "carousel":
            this.carousel = "false" !== n;
            break;
          case "allownext":
            this.allowNext = "false" !== n;
            break;
          case "allowback":
            this.allowBack = "false" !== n;
            break;
          case "lazyloading":
            this.lazyLoading = "false" !== n;
            break;
          case "autoplay":
            this.autoplay = "false" !== n;
            break;
          case "autoplay-interval":
            this.autoplayInterval = parseInt(n) || 3e3;
        }
    }
    get orientation() {
      return this.getAttribute("orientation") || "horizontal";
    }
    set orientation(t) {
      this.setAttribute("orientation", t);
    }
    get width() {
      return this.getAttribute("width") || "100%";
    }
    set width(t) {
      this.setAttribute("width", t);
    }
    get height() {
      return this.getAttribute("height") || "100%";
    }
    set height(t) {
      this.setAttribute("height", t);
    }
    get showButtons() {
      return (
        this.hasAttribute("show-buttons") &&
        "false" !== this.getAttribute("show-buttons")
      );
    }
    set showButtons(t) {
      t
        ? this.setAttribute("show-buttons", "true")
        : this.setAttribute("show-buttons", "false"),
        this.updateShowButtons();
    }
    get carousel() {
      return (
        this.hasAttribute("carousel") &&
        "false" !== this.getAttribute("carousel")
      );
    }
    set carousel(t) {
      t
        ? this.setAttribute("carousel", "true")
        : this.setAttribute("carousel", "false"),
        this.updateNavButtons();
    }
    get allowNext() {
      return (
        !this.hasAttribute("allownext") ||
        "false" !== this.getAttribute("allownext")
      );
    }
    set allowNext(t) {
      t
        ? this.setAttribute("allownext", "true")
        : this.setAttribute("allownext", "false"),
        this.updateNavButtons();
    }
    get allowBack() {
      return (
        !this.hasAttribute("allowback") ||
        "false" !== this.getAttribute("allowback")
      );
    }
    set allowBack(t) {
      t
        ? this.setAttribute("allowback", "true")
        : this.setAttribute("allowback", "false"),
        this.updateNavButtons();
    }
    get lazyLoading() {
      return (
        this.hasAttribute("lazyloading") &&
        "false" !== this.getAttribute("lazyloading")
      );
    }
    set lazyLoading(t) {
      t
        ? this.setAttribute("lazyloading", "true")
        : this.setAttribute("lazyloading", "false"),
        t && this.lazyLoadAround(this._currentIndex);
    }
    get autoplay() {
      return this._autoplay;
    }
    set autoplay(t) {
      const e = Boolean(t);
      e !== this._autoplay &&
        ((this._autoplay = e), e ? this.startAutoplay() : this.stopAutoplay()),
        e
          ? this.setAttribute("autoplay", "true")
          : this.removeAttribute("autoplay");
    }
    get autoplayInterval() {
      return this._autoplayInterval;
    }
    set autoplayInterval(t) {
      (this._autoplayInterval = t || 3e3),
        this._autoplay && (this.stopAutoplay(), this.startAutoplay()),
        this.setAttribute("autoplay-interval", this._autoplayInterval);
    }
    startAutoplay() {
      this.stopAutoplay(),
        (this._autoplayTimer = setInterval(() => {
          this.showPage(this._currentIndex + 1);
        }, this._autoplayInterval));
    }
    stopAutoplay() {
      this._autoplayTimer &&
        (clearInterval(this._autoplayTimer), (this._autoplayTimer = null));
    }
    updateDimensions() {
      (this.style.width = this.width), (this.style.height = this.height);
    }
    updateShowButtons() {
      this.showButtons
        ? (this.prevBtn.removeAttribute("hidden"),
          this.nextBtn.removeAttribute("hidden"))
        : (this.prevBtn.setAttribute("hidden", ""),
          this.nextBtn.setAttribute("hidden", ""));
    }
    updateOrientationStyles() {
      "vertical" === this.orientation
        ? this.setAttribute("orientation", "vertical")
        : this.setAttribute("orientation", "horizontal");
    }
    updateNavButtons() {
      (this.prevBtn.disabled =
        !this.allowBack || (!this.carousel && this._currentIndex <= 0)),
        (this.nextBtn.disabled =
          !this.allowNext ||
          (!this.carousel && this._currentIndex >= this._itemsCount - 1)),
        this.updateShowButtons();
    }
    onSlotChange() {
      (this._itemsCount = this.slots.assignedElements().length),
        this._currentIndex >= this._itemsCount && (this._currentIndex = 0),
        this.updateIndicators(),
        this.showPage(this._currentIndex),
        this.lazyLoading && this.lazyLoadAround(this._currentIndex);
    }
    updateIndicators() {
      this.indicators.innerHTML = "";
      for (let t = 0; t < this._itemsCount; t++) {
        const e = document.createElement("button");
        (e.type = "button"),
          e.setAttribute("role", "tab"),
          e.setAttribute("aria-label", `Go to page ${t + 1}`),
          e.setAttribute(
            "aria-selected",
            t === this._currentIndex ? "true" : "false"
          ),
          (e.dataset.index = t),
          e.addEventListener("click", () => {
            this.showPage(t);
          }),
          this.indicators.appendChild(e);
      }
    }
    showPage(t) {
      if (0 === this._itemsCount) return;
      if (t < 0) {
        if (!this.carousel) return;
        t = this._itemsCount - 1;
      } else if (t >= this._itemsCount) {
        if (!this.carousel) return;
        t = 0;
      }
      (this._currentIndex = t), this.updateIndicators();
      const e =
        "horizontal" === this.orientation
          ? Math.round(this.container.clientWidth * t)
          : Math.round(this.container.clientHeight * t);
      "horizontal" === this.orientation
        ? this.container.scrollTo({ left: e, behavior: "smooth" })
        : this.container.scrollTo({ top: e, behavior: "smooth" }),
        this.dispatchEvent(
          new CustomEvent("pagechanged", { detail: { index: t } })
        ),
        this.lazyLoading && this.lazyLoadAround(t),
        this.updateNavButtons(),
        this._autoplay && (this.stopAutoplay(), this.startAutoplay());
    }
    onNext() {
      this.allowNext && this.showPage(this._currentIndex + 1);
    }
    onPrev() {
      this.allowBack && this.showPage(this._currentIndex - 1);
    }
    NextPage() {
      this.onNext();
    }
    PreviousPage() {
      this.onPrev();
    }
    setIndex(t) {
      "number" != typeof t || t < 0 || t >= this._itemsCount
        ? console.warn("Invalid index passed to setIndex:", t)
        : this.showPage(t);
    }
    getIndex() {
      return this._currentIndex;
    }
    getSize() {
      return this._itemsCount;
    }
    clear() {
      for (; this.firstChild; ) this.removeChild(this.firstChild);
      (this._currentIndex = 0), (this._itemsCount = 0), this.updateNavButtons();
    }
    AddPage(t, e = "") {
      if (!(t instanceof Element))
        return void console.warn("AddPage expects a DOM Element");
      const n = this._itemsCount + 1;
      (t.id = `${this.id || "jpager"}_${n}`),
        t.setAttribute("data-tag", e),
        this.appendChild(t),
        this._itemsCount++,
        this.updateNavButtons();
    }
    AddPageAt(t, e, n = "") {
      if (!(t instanceof Element))
        return void console.warn("AddPageAt expects a DOM Element");
      if ("number" != typeof e || e < 0 || e > this._itemsCount)
        return void console.warn("Invalid index passed to AddPageAt:", e);
      const i = this._itemsCount + 1;
      (t.id = `${this.id || "jpager"}_${i}`), t.setAttribute("data-tag", n);
      const s = this.children[e] || null;
      this.insertBefore(t, s), this._itemsCount++, this.updateNavButtons();
    }
    GetPanel(t) {
      const e = Array.from(this.children);
      return t < 0 || t >= e.length
        ? (console.warn("Invalid index passed to GetPanel:", t), null)
        : e[t];
    }
    GetValue(t) {
      const e = this.GetPanel(t);
      return e ? e.getAttribute("data-tag") : null;
    }
    RemovePageAt(t) {
      if ("number" != typeof t || t < 0 || t >= this._itemsCount)
        return void console.warn("Invalid index passed to RemovePageAt:", t);
      const e = Array.from(this.children),
        n = e[t];
      n &&
        (this.removeChild(n),
        this._itemsCount--,
        this._currentIndex >= this._itemsCount &&
          (this._currentIndex = this._itemsCount - 1),
        this._currentIndex < 0 && (this._currentIndex = 0),
        this.updateNavButtons(),
        this.showPage(this._currentIndex));
    }
    onKeyDown(t) {
      "horizontal" === this.orientation
        ? "ArrowRight" === t.key
          ? this.onNext()
          : "ArrowLeft" === t.key && this.onPrev()
        : "ArrowDown" === t.key
        ? this.onNext()
        : "ArrowUp" === t.key && this.onPrev();
    }
    onScroll() {
      this.debounceTimeout && clearTimeout(this.debounceTimeout),
        (this.debounceTimeout = setTimeout(() => {
          const t =
            "horizontal" === this.orientation
              ? Math.round(
                  this.container.scrollLeft / this.container.clientWidth
                )
              : Math.round(
                  this.container.scrollTop / this.container.clientHeight
                );
          t !== this._currentIndex &&
            ((this._currentIndex = t),
            this.dispatchEvent(
              new CustomEvent("pagechanged", { detail: { index: t } })
            ),
            this.lazyLoading && this.lazyLoadAround(t),
            this.updateNavButtons(),
            this.updateIndicators());
        }, 150));
    }
    lazyLoadAround(t) {
      const e = this.slots.assignedElements();
      e.forEach((e, n) => {
        n >= t - this._lazyLoadingExtraSize &&
        n <= t + this._lazyLoadingExtraSize
          ? 0 === e.childElementCount &&
            "function" == typeof this.lazyLoadingAddContent &&
            this.lazyLoadingAddContent(e, e.dataset.value)
          : e.childElementCount > 0 && (e.innerHTML = "");
      });
    }
    setLazyLoadingExtraSize(t) {
      this._lazyLoadingExtraSize = t;
    }
    setLazyLoadingAddContent(t) {
      this.lazyLoadingAddContent = t;
    }
  }
  customElements.define("jpager-carousel", e);
})();
